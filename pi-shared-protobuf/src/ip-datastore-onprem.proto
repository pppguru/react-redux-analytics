syntax = "proto3";
option java_package = "pi.ip.generated.datastore_onprem";
option java_multiple_files = true;

import "cite_service.proto";
import "patent_common.proto";
import "ip-datastore-common.proto";

service DatastoreOnPremService {

    // -- prioritySource --

    rpc PersistPrioritySrc (DocDbXmlNode) returns (AckResponse) {
        // called for each xml fragment from raw docdb stream
    }

    rpc GetPriorityNumberSources (UniMsg) returns (DocDbXmlNodeResponse) {

    }

    rpc CalcPriorityDate (UniMsg) returns (CalcPriorityDateResponse) {
    }

    // -- refNumberSource --

    rpc PersistRefNumberSource (DocDbXmlNode) returns (AckResponse) {
    }

    rpc GetRefNumberSources (UniMsg) returns (DocDbXmlNodeResponse) {

    }

    // -- app phase --
    rpc GetAppPhaseSyncs (AppPhaseSyncsRequest) returns (AppPhaseSyncsResponse) {
    }

    rpc DeleteAppPhaseSyncs (DeleteAppPhaseSyncsRequest) returns (AckResponse) {
    }

    // -- applicantSource --

    rpc PersistApplicantSrc (DocDbXmlNode) returns (AckResponse) {
    }

    rpc GetApplicantSources (UniMsg) returns (DocDbXmlNodeResponse) {
    }

    // -- citationSource --

    rpc PersistCitationSrc (DocDbXmlNode) returns (AckResponse) {
    }

    rpc GetCitationSources (UniMsg) returns (DocDbXmlNodeResponse) {
    }

    // process citation sync record in onPrem , this method will
    // 1: parse docDbXml node
    // 2: extract meaningful field, ncFamId,pacFamId,ncUniPat,pacUniPat, citeLevel,citeDate with help of refNum service
    // 3: store direct citation data into table "prod:directCite"
    //  3.1: row key: ncFamId_pacFamId_ncUniPat_pacUniPat
    //  3.2: save dynamic column: type_$citeType
    //  3.3: save dynamic column: date_$citeDate(in yyyyMMdd format)
    //  3.4: have co processor to track persist of row in "prod:directCitation" to "prod:directCitationSync"
    rpc ProcessCitationSourceUpdate (DocDbXmlNodeResponse) returns (AckResponse) {
    }

    rpc GetDirectCite (GetDirectCiteRequest) returns (GetDirectCiteResponse) {
    }

    // -- inventionTitle --

    rpc PersistInventionTitleSrc (DocDbXmlNode) returns (AckResponse) {
    }

    rpc GetInventionTitleSources (UniMsg) returns (DocDbXmlNodeResponse) {
    }

    rpc ProcessInventionTitleSourceUpdate (DocDbXmlNodeResponse) returns (AckResponse) {
    }

    rpc LookupInventionTitleByFamily (FamilyMsg) returns (InventionTitle) {
    }

    // -- healthSource --

    rpc PersistHealthSrc (PatHealthNode) returns (AckResponse) {
    }

    rpc GetHealthSource (UniMsg) returns (PatHealthNodeResponse) {
    }

    rpc ProcessHealthSourceUpdate (cite_service.PatentHealth) returns (AckResponse) {
    }

    // -- patent apps whose health we need to LAPSE sometime in the future based on their priority date

    rpc PersistExpirablePatApp (PersistExpirablePatAppRequest) returns (AckResponse) {
    }

    rpc GetExpirablePatApps (GetSyncRequest) returns (stream ExpirablePatAppResponse) {
    }

    // -- nationalJournal --

    rpc PersistNatJournalSource (NatJournalNode) returns (AckResponse) {
    }

    rpc GetNatJournalSource (GetNatJournalSourceRequest) returns (NatJournalNode) {
    }
}

service OnPremCitationService {
    rpc GetCitationSourceSyncKeys (SyncKeysRequest) returns (SyncKeysResponse) {
    }
    rpc GetCitationSourcesByKey (LookupSyncPrimaryRequest) returns (DocDbXmlBundle) {
    }
}

service OnPremAddressService {
    // save the raw service address for a uni pat number
    rpc SaveRawServiceUniPatPair (RawAddrEntityTuple) returns (RawAddrEntityKey) {
    }

    rpc GetRawServiceEntities (GetRawServiceEntityRequest) returns (stream GetRawServiceEntityResponse) {
    }

    rpc SaveRawServiceGeodata (SaveRawServiceGeodataRequest) returns (AckResponse) {
    }

    rpc FindByLegacyServiceAddressId (LegacyServiceAddressId) returns (RawAddrEntityKey) {
    }

    rpc SaveNormalisedAddress (SaveNormalisedAddressRequest) returns (SaveNormalisedAddressResponse) {
    }

    rpc GetRawServiceEntityByUniPatNum (GetRawServiceEntityByUniPatNumRequest) returns (GetRawServiceEntityByUniPatNumResponse) {

    }

    rpc GetRawAddrEntity (RawAddrEntityKey) returns (RawAddrEntity) {

    }

    rpc UpdateRawServiceEntity (UpdateRawServiceEntityRequest) returns (AckResponse) {

    }

    rpc GetNormalisedServiceEntity (NormalisedServiceEntityKey) returns (NormalisedServiceEntityResponse) {

    }
}

service OnPremGeocodingService {
    // returns number of remaining geocoding requests
    rpc GetRemainingRequestsCount (GetRemainingRequestsCountRequest) returns (GetRemainingRequestsCountResponse) {
    }

    // geocodes location request
    rpc Geocode (GeocodeRequest) returns (GeocodeResponse) {

    }
}

message GetRemainingRequestsCountRequest {

}

message GetRemainingRequestsCountResponse {
    int32 count = 1;
}

message GeocodeRequest {
    string request = 1;
}

message GeocodeResponse {
    enum Status {
        OK = 0;
        ERROR = 1;
        OVER_LIMIT = 2;
    }

    enum Source {
        GOOGLE = 0;
    }

    string response = 1;
    Status status = 2;
    Source source = 3;
}

message LegacyServiceAddressId {
    uint64 service_address_id = 1;
}

message RawServiceAssociation {
    RawAddrEntityKey raw_addr_entity_key = 1;

    // at least one addr uni pat is required
    repeated RawAddrUniPat raw_addr_uni_pat = 2;
}

message RawAddrEntityTuple {

    // a list of address fields
    repeated RawAddrField addr_field = 1;

    // optional - the uni pat number and source page date
    repeated RawAddrUniPat raw_service_uni_pat = 2;
}

message RawAddrEntityKey {
    string row_key = 1;
}

// modify this message with caution, as it is used in database storage via RawServiceEntityDao
message RawAddrUniPat {
    string uni_pat_num = 1;
    uint32 source_page_date = 2;
    string agent_file_ref = 3;
    UnitaryPatPageType page_type = 4;
}


message CalcPriorityDateResponse {
    int32 priority_date = 1;
}

message PersistExpirablePatAppRequest {
    string uni_pat_num = 1;
    int32 priority_date = 2;
}

message ExpirablePatAppResponse {
    string uni_pat_num = 1;
    int32 priority_date = 2;
}

message GetRawServiceEntityRequest {
    int32 limit = 1;

    enum StateFilter {
        Pending = 0;
        Done = 1;
        Succeeded = 2;
        Failed = 3;
        NotNormalised = 4;
    }

    StateFilter filter = 2;
    string country_code = 3;
    string row_key = 4;
    bool skip_geodata_parsing = 5;
}

message RawDataPackage {
    string row_key = 1;
    repeated RawAddrField addr_field = 2;
    string raw_geodata = 3;
    string uni_pat_num = 4;

    // parsed info from 'raw_geodata'
    string geodata_formatted_address = 5;
    string geodata_country_code = 6;
}

message GetRawServiceEntityResponse {
    string row_key = 1;
    repeated RawAddrField addr_field = 2;
    string raw_geodata = 3;

    // parsing geodata logic is on service side, so if possible parse there and return following to client:
    string geodata_formatted_address = 4;
    string geodata_country_code = 5;
}

message SaveRawServiceGeodataRequest {
    string row_key = 1;
    string raw_geodata = 2;
    GeoLookupStateValue state = 3;
    GeocodeResponse.Source source = 4;
}

message SaveNormalisedAddressRequest {
    string raw_address_row_key = 1;
    string distinguishing = 2;
    string formatted_address = 3;
    string normaliser = 4;
}

message SaveNormalisedAddressResponse {
    string normalised_address_row_key = 1;
}

message GetNatJournalSourceRequest {
    string national_id = 1;
    int32 content_date = 2;
}

message GetRawServiceEntityByUniPatNumRequest {
    string uni_pat_num = 1;
}

message GetRawServiceEntityByUniPatNumResponse {
    string uni_pat_num = 1;
    string raw_address_row_key = 2;
    string normalised_address_row_key = 3;
}

message UpdateRawServiceEntityRequest {
    string raw_address_row_key = 1;
    repeated RawAddrField addr_field = 2;
}

message NormalisedServiceEntityKey {
    string normalised_address_row_key = 1;
}

message NormalisedServiceEntityResponse {
    LatLong lat_long = 1;
    string country_code = 2;
    repeated RawAddrEntity raw_addr_entities = 3;
    string distinguishing = 4;
    string formatted_address = 5;
}

message AppPhaseSyncRecord {
    enum SyncPhaseType {
        Calculate = 0;
        Notify = 1;
    }

    int64 family_id = 1;
    SyncPhaseType phase_type = 2;
    int64 timestamp = 3;
}

message AppPhaseSyncsRequest {
    int32 limit = 1;
    // if set, requests that resulting list have rowKey > startKey
    int64 start_key = 2;

    // for single reader, use reader_number=0, number_of_readers=1
    SplitReader split_reader = 3;
}

message AppPhaseSyncsResponse {
    repeated AppPhaseSyncRecord records = 1;
    // whether the end of the row keys was reached
    bool end_of_sync_key_source = 2;
}

message DeleteAppPhaseSyncsRequest {
    repeated int64 family_id = 1;
}

message GetDirectCiteRequest {
    int64 nc_famly_id = 1;
    int64 pac_famly_id = 2;
}

message GetDirectCiteResponse {
    repeated cite_service.DirectCite direct_cites = 1;
}
