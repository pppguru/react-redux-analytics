// Copyright (c) 2016 Practice Insight Pty Ltd. All rights reserved.
//this proto buffer has been split into 2 protobuffer fiels
//law firm search and applicant search is moved to elastic_search_service.proto
//citaiton search is moved to citaiton_query.proto
syntax = "proto3";
option java_package = "io.practiceinsight.licensingalert.citationsearch.generated";
option java_multiple_files = true;

import "google/api/annotations.proto";
import "patent_common.proto";
import "cite_service.proto";

package licensingalert;

// TODO(SX/IL) add description of what service is used for
service CitationSearchService {

    // TODO(SX/IL) add description rpc method
    rpc Search (CitationSearchRequest) returns (CitationSearchResult) {
        option (google.api.http) = {
          post: "/la/api/v1/citations/search"
          body: "*"
        };
    }
}

// TODO(SX/IL) add description of what service is used for - how is it different from non-`naked`?
service NakedCitationSearchService {

    rpc Search (CitationSearchRequest) returns (CitationSearchResult) {
    }

    rpc FindNewAlerts (FindNewAlertsRequest) returns (FindNewAlertsResult) {
    }

}

// TODO(SX/IL) add description of what service is used for / by
service LawFirmSearchService {
    rpc Search (LawFirmSearchRequest) returns (LawFirmSearchResult) {
        option (google.api.http) = {
      post: "/la/api/v1/lawfirms/search"
        body: "*"
      };
    }

    rpc FindById (FindLawFirmByIdRequest) returns (LawFirm) {
        option (google.api.http) = {
          get: "/la/api/v1/lawfirms/{law_firm_id}"
        };
    }
}

// TODO(SX/IL) add description of what service is used for - how is it different from non-`naked`?
service NakedLawFirmSearchService {
    rpc Search (LawFirmSearchRequest) returns (LawFirmSearchResult) {
    }

    rpc FindById (FindLawFirmByIdRequest) returns (LawFirm) {
    }
}

// TODO(SX/IL) add description of what service is used for / by
service ApplicantSearchService {
    rpc Search (ApplicantSearchRequest) returns (ApplicantSearchResult) {
        option (google.api.http) = {
          post: "/la/api/v1/applicants/search"
          body: "*"
        };
    }
}
// TODO(SX/IL) add description of what service is used for / by
service NakedApplicantSearchService {
    rpc Search (ApplicantSearchRequest) returns (ApplicantSearchResult) {
    }
}

message LawFirmSearchRequest {
    string law_firm_prefix = 1;

    string country_code = 2; // Optional. Default empty value means get results from all countries.
}
message LawFirmSearchResult {
    repeated LawFirm law_firms = 1;
}

message FindLawFirmByIdRequest {
    int64 law_firm_id = 1;
}

message Applicant {
    string name = 1;
    string country = 2;
}

message ApplicantSearchRequest {
    string applicant_prefix = 1;
}
message ApplicantSearchResult {
    repeated Applicant applicants = 1;
}

message Citation {
    int64 pac_law_firm_id = 1;
    string pac_law_firm_name = 2;
    string pac_law_firm_country = 3;
    string pac_app_no_uni_pat = 4;
    string pac_app_no_orig = 5; // will include office code
    int64 pac_family_id = 6;
    string pac_title = 7;
    repeated Applicant pac_applicants = 8;

    string nc_app_no_uni_pat = 9;
    string nc_app_no_orig = 10; // will include office code
    int64 nc_family_id = 11;
    string nc_title = 12;
    repeated Applicant nc_applicants = 13;

    bool common_applicant = 14;
    cite_service.CiteType cite_type = 15;
    int64 first_raised_date = 16;
    cite_service.PacHealth pac_health = 17;
    cite_service.CasePhase nc_phase = 18;

    bool is_originating_pac_law_firm = 19 [deprecated = true];
}

// LastRaisedDateFilter must present with
// ApplicantOfPacIn or LawFirmOfPacIn
message CitationSearchRequest {
    repeated FilterRule filter_rules = 1;
    int32 fetch_limit = 2; // used by search in web front end Math.MIN(value,100)
}

message FindNewAlertsRequest {
    repeated FilterRule filter_rules = 1;
    int64 min_modification_date_utc = 2; // used by alert generator
    int64 max_modification_date_utc = 3; // used by alert generator
}

message FindNewAlertsResult {
    repeated Citation citations = 1;
    int64 total_count = 2;
}

message CitationSearchResult {
    repeated Citation citations = 1;
    int64 total_count = 2;
}

message FilterRule {
    oneof type {
        // search query will always contain either an applicant or law firm filter
        ApplicantOfPacIn applicant_of_pac_in = 1;
        LawFirmOfPacIn law_firm_of_pac_in = 2;

        // filtered as stream + date updated
        PacCitesToHealth pac_health = 3;

        // filtered as stream + date updated
        NcProsecutionPhase nc_prosecution_phase = 4;

        // TODO(SX/IL) remove me
        PacIsOriginatingApplication pac_is_originating_application = 5 [deprecated = true];

        // Of results found, exclude any where Pac applicant is in this list
        // Non-indexed / results filtered in-memory
        ApplicantOfPacNotIn applicant_of_pac_not_in = 6;

        // Of results found, exclude any where
        MinimumCiteType minimum_cite_type = 7;

        // TODO(SX/IL) does this mean "FirstRaisedAfter"?  How used in GUI?
        FirstRaisedDateNotBefore first_raised_date_not_before = 8;

        // Of results found, exclude any where Nc applicant is in this list
        // Non-indexed / results filtered in-memory
        ApplicantOfNcIn applicant_of_nc_in = 9;
    }
}

message ApplicantOfPacIn {
    repeated string applicant_names = 1;
}

message ApplicantOfNcIn {
    repeated string applicant_names = 1;
}

message LawFirmOfPacIn {
    repeated int64 law_firm_ids = 2;
}

enum PatentHealthFilter {
    ALL_HEALTH = 0;
    ALIVE_ONLY = 1;
}

message PacCitesToHealth {
    PatentHealthFilter health_filter = 1;
}

message NcProsecutionPhase {
    NcProsecutionPhaseFilter nc_phase_filter = 1;
}

enum NcProsecutionPhaseFilter {
    ALL_PHASES = 0;
    ACCEPTED_ONLY = 1;
}

message PacIsOriginatingApplication {
    option deprecated = true;
    bool is_originating_application = 1;
}

message ApplicantOfPacNotIn {
    repeated string applicant_names = 1;
}

message MinimumCiteType {
    cite_service.CiteType cite_type = 1;
}

message FirstRaisedDateNotBefore {
    int64 date = 1;
}
