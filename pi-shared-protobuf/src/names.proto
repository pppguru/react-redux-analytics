// Copyright (c) 2016 Practice Insight Pty Ltd. All rights reserved.

syntax = "proto3";
package names_service;
option java_package = "pi.ip.data.names.generated";
option java_multiple_files = true;

import "google/protobuf/wrappers.proto";
import "patent_common.proto";

// this is served via lookup cache service
service NamesService {

    // LookupRepsByFamily (returning all known representatives for given family_id)
    // has been deprecated in favour of using ip-data-relational service to avoid need for cache

    // returns all known applicants for given family_id
    rpc LookupApplicantByFamily (google.protobuf.Int64Value) returns (ApplicantFamilySet) {
    }

    // lookup country based on name via probability
    rpc TransformNameDdToCountry (google.protobuf.StringValue) returns (google.protobuf.StringValue) {
    }

    rpc TransformNameOrigToDd (google.protobuf.StringValue) returns (google.protobuf.StringValue) {
    }

    rpc TransformNameDdToOrig (google.protobuf.StringValue) returns (google.protobuf.StringValue) {
    }

    rpc TransformNameDdToOrigs (google.protobuf.StringValue) returns (ApplicantOriginalNames) {
    }

    rpc FindPartyByFamily (google.protobuf.Int64Value) returns (PartyByFamily) {
    }

    // Calls FindPartyByFamily logic, removing any applicant-inventors from the result list
    rpc FindPartyByFamilySansInventors (google.protobuf.Int64Value) returns (PartyByFamily) {
    }

    rpc CountFilingsByNameDd (CountFilingsByNameDdRequest) returns (google.protobuf.Int32Value) {
    }
}

message CountFilingsByNameDdRequest {
    string applicant_name = 1;
    int32 firstPublishedDate = 2;
}

message ApplicantOriginalNames {
    repeated string orig_names = 1;
}

message PartyByFamily {
    // pt1 of of row key
    int64 family_id = 1;

    // family id will have 1 or more applicant/inventor bundles, grouped by uni_pat + distinguishing_key
    repeated PartyByUniPat party_by_uni_pat = 2;
}

message PartyByUniPat {
    // pt2 of of row key
    string uni_pat = 1;

    // pt3 of of row key
    // the first 8 characters should be a date in form of yyyyMMdd representing the date data was produced by source
    // (not when we saved it)
    // additionally, should be a string that is sortable such as that ASC sort as earliest/oldest data first
    string date_then_distinguish_key = 2;

    // the information source for the entity information (in most cases this will be DocDbXml)
    UnitaryPatPageType info_source = 5;

    // entity information
    repeated PartyEntityBundle applicant = 3;
    repeated PartyEntityBundle inventor = 4;
}

message PartyEntityBundle {
    // an arbitrary number assigned to each distinct applicant in bundle (starting from value 1)
    int32 seq_num = 1;

    // PartyEntity is repeated because there may be multiple formats provided for the same entity
    repeated PartyEntity party_entity = 2;
}

message PartyEntity {
    FormatType format_type = 1;

    string name = 2;

    // optional
    string country = 3;

    // optional
    string address = 4;
}

message Applicants {
    option deprecated = true;
    repeated Applicant applicants = 1;
}

message Applicant {
    option deprecated = true;

    string name = 1; // this will be known from datastore
    string country = 2; // this may be missing - if missing, use `name -> country` dao method
    int64 applicant_id = 3; // this is accessible from PatUpdateService#UpsertApplicantBasic rpc
    string format = 4; // this is actually format from xml
}
