//
// Copyright (c) 2016 Practice Insight Pty Ltd. All rights reserved.
//

syntax = "proto3";
package pi_customer_public;
option java_package = "pi.customer.generated";
option java_multiple_files = true;

import "google/api/annotations.proto";

service PublicUserService {

    // Returns an Invalid Argument error (code 3) if the access token is invalid or has expired
    rpc ValidateAccessToken (ValidateAccessTokenRequest) returns (ValidateAccessTokenResponse) {
    }

    // Returns an Invalid Argument error (code 3) if the access token is invalid or has expired
    rpc IsAccessTokenValidForUser (IsAccessTokenValidForUserRequest) returns (IsAccessTokenValidForUserResponse) {
    }

    // Consume a refresh token for a new pair of access and refresh tokens
    // Returns an Invalid Argument error (code 3) if the access token is invalid or has expired
    // 1: Take refresh_token from RefreshAccessTokenRequest
    // 2: RefreshToken token = tokenParser.parseLongLivedToken(foundLongLivedToken.get());
    // 3: migrate logic from RefreshTokenService#refreshToken to this service method
    // 4: only return access token in RefreshAccessTokenResponse
    // 4: continue ->(the returned access token can be further parsed by method DecodeAccessToken)
    // 5: throw exception when you meet exception internally
    rpc RefreshAccessToken (RefreshAccessTokenRequest) returns (RefreshAccessTokenResponse) {
        option (google.api.http) = {
            post: "/customer/api/v1/user/refreshaccesstoken"
            body: "*"
        };
    }

    rpc LogUsageMetrics (UserAction) returns (UsageMetricsLogged) {
        option (google.api.http) = {
          post: "/customer/api/v1/metrics"
          body: "*"
        };
    }

    // Email the sales team (sales@practiceinsight.io) the request details
    // Returns an Invalid Argument error (code 3) if the subject field is empty or if any of
    // the sender fields are empty.
    rpc NotifySalesTeam (SalesTeamNotificationRequest) returns (SalesTeamNotified) {
        option (google.api.http) = {
            post: "/customer/api/v1/notifysalesteam"
            body: "*"
        };
    }

    // Email the wisetime team (customer@wisetime.io) the request details
    rpc NotifyWiseTimeTeam (WiseTimeTeamNotificationRequest) returns (WiseTimeTeamNotificationResponse) {
        option (google.api.http) = {
            post: "/customer/api/v1/notifywisetimeteam"
            body: "*"
        };
    }

    // Create a access/refresh token pair by logging in using a cryptographic signature.
    // This is used by the WiseTime desktop client to login to the console without requiring password to be re-entered.
    rpc DirectLogin (DirectLoginRequest) returns (DirectLoginResponse) {
        // FIXME: We should be able to serve this response directly using the grpc-rest gateway as this request is
        // issed by the WiseTime REST handler for URL: /h/:userId/:timeStamp/:signatureHex
    }

    // Manually clear the salesforce cache
    rpc ClearSalesforceCache (ClearSalesforceCacheRequest) returns (ClearSalesforceCacheResponse) {
        option (google.api.http) = {
            post: "/customer/api/v1/clearcache"
            body: "*"
        };
    }

    // Populate PI related fields for a user created in Salesforce
    rpc CreatePIUser (CreatePIUserRequest) returns (CreatePIUserResponse) {
        option (google.api.http) = {
            post: "/customer/api/v1/createuser"
            body: "*"
        };
    }

    // Endpoint for sending email notification regarding user licence
    rpc NotifyLicenceOwner (NotifyLicenceOwnerRequest) returns (NotifyLicenceOwnerResponse) {
        option (google.api.http) = {
            post: "/customer/api/v1/notifylicenceowner"
            body: "*"
        };
    }
}

message IsAccessTokenValidForUserRequest {
    string access_token = 1;
    string user_id = 2;
}

message IsAccessTokenValidForUserResponse {
    bool valid = 1;
}

message ValidateAccessTokenRequest {
    string access_token = 1;
}

message ValidateAccessTokenResponse {
}

message RefreshAccessTokenRequest {
    string user_id = 1 [deprecated = true];
    string refresh_token = 2;
}

message RefreshAccessTokenResponse {
    string access_token = 1;
    string refresh_token = 2;
}

message UserAction {
    string app_id = 1;
    string email = 2;
    string action = 3;
}

message UsageMetricsLogged {
}

message SalesTeamNotificationRequest {
    Sender sender = 1;
    string subject = 2;
    string content = 3;

    message Sender {
        string first_name = 1;
        string last_name = 2;
        string organisation = 3;
        string email = 4;
        string phone = 5;
        string platform = 6;
        string title = 7;
        string country = 8;
        string timezone = 9;
    }
}

message SalesTeamNotified {
}

message WiseTimeTeamNotificationRequest {
    Sender sender = 1;
    string subject = 2;
    string content = 3;

    message Sender {
        string first_name = 1;
        string last_name = 2;
        string organisation = 3;
        string email = 4;
        string phone = 5;
        string platform = 6;
        string timezone = 7;
        string country = 8;
    }
}

message WiseTimeTeamNotificationResponse {
}

// Direct login request for the given user_id. Other parameters:
// timestamp - the UTC timestamp that the request was generated in format: yyyyMMddHHmmss
// signature - a HmacSHA256 hex signature generated using user_id, timestamp, and the user's secret key
// Throws Status.INVALID_ARGUMENT error if signature does not match
message DirectLoginRequest {
    string user_id = 1;
    string timestamp = 2;
    string signature = 3;
}

message DirectLoginResponse {
    string access_token = 1;
    string refresh_token = 2;
}

message ClearSalesforceCacheRequest {
}

message ClearSalesforceCacheResponse {
}

message CreatePIUserRequest {
    string apiKey = 1;
    string salesforceId = 2;
    string appId = 3;
}

message CreatePIUserResponse {
    repeated string message = 1;
}

message NotifyLicenceOwnerRequest {
    string licenceId = 1;
}

message NotifyLicenceOwnerResponse {
}
